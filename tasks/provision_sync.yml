---

- name: linux - launch a compute instance
  openstack.cloud.server:
    state: present
    name: "{{ node.name }}"
    image: "{{ node.image | default(omit) }}"
    key_name: "{{ node.key_name }}"
    timeout: "{{ instance_timeout }}"
    flavor: "{{ node.flavor }}"
    nics: "{{ node.nics }}"
    boot_from_volume: "{{ _boot_from_volume }}"
    terminate_volume: "{{ _terminate_volume }}"
    boot_volume: "{{ _boot_volume }}"
    volume_size: "{{ _volume_size }}"
    userdata: "{{ node.user_data | default('') }}"
    meta:
      hostname: "{{ node.name }}"
      role: "{{ node.role }}"
      app_name: "{{ node.app_name }}"
    auto_ip: "{{ _auto_ip }}"
    floating_ips: "{{ _floating_ips if (_floating_ips | length) else omit }}"
    volumes: "{{ _server_volumes }}"
    wait: yes
    validate_certs: "{{ openstack_validate_certs }}"
  register: deploy_linux
  loop: "{{ nodes }}"
  loop_control:
    loop_var: node
  when:
    - nodes is defined
    - node.os_type is not defined or (node.os_type is defined and node.os_type | lower == 'linux')

- name: windows - launch a compute instance
  openstack.cloud.server:
    state: present
    name: "{{ node.name }}"
    image: "{{ node.image | default(omit) }}"
    key_name: "{{ node.key_name }}"
    timeout: "{{ instance_timeout }}"
    flavor: "{{ node.flavor }}"
    nics: "{{ node.nics }}"
    boot_from_volume: "{{ _boot_from_volume }}"
    terminate_volume: "{{ _terminate_volume }}"
    boot_volume: "{{ _boot_volume }}"
    volume_size: "{{ _volume_size }}"
    userdata: "{{ node.user_data | default(lookup('template', 'templates/userdata.txt.j2')) }}"
    meta:
      hostname: "{{ node.name }}"
      role: "{{ node.role }}"
      app_name: "{{ node.app_name }}"
    auto_ip: "{{ _auto_ip }}"
    floating_ips: "{{ _floating_ips if (_floating_ips | length) else omit }}"
    volumes: "{{ _server_volumes }}"
    wait: yes
    validate_certs: "{{ openstack_validate_certs }}"
  register: deploy_windows
  loop: "{{ nodes }}"
  loop_control:
    loop_var: node
  when:
    - nodes is defined
    - node.os_type is defined
    - node.os_type | lower == 'windows'

- name: combine deployment results
  set_fact:
    deploy_results: "{{ deploy_results|default([]) + [ item ] }}"
  loop: "{{ deploy_linux.results + deploy_windows.results }}"
  no_log: yes
  when:
    - nodes is defined
    - (item.skipped is not defined) or not item.skipped

- name: set instances results
  set_fact:
    instances: "{{ {'results': deploy_results } }}"